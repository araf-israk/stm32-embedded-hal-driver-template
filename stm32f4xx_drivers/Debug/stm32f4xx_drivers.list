
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000105c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080011f4  080011f4  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080011f4  080011f4  00003018  2**0
                  CONTENTS
  4 .ARM          00000000  080011f4  080011f4  00003018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011f4  080011f4  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011f4  080011f4  000021f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080011f8  080011f8  000021f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080011fc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000018  08001214  00003018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001214  00003090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000177a  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005d1  00000000  00000000  000047c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00004d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000156  00000000  00000000  00004f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025a7  00000000  00000000  000050be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ed1  00000000  00000000  00007665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009e92  00000000  00000000  00009536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000133c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006ec  00000000  00000000  0001340c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00013af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080011dc 	.word	0x080011dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	080011dc 	.word	0x080011dc

080001d8 <delay>:
// receive buffer
uint8_t rcv_buf[32];
uint8_t commandcode;
uint8_t len;

void delay(void){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 250000; i++){
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	@ (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>

	}
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	0003d08f 	.word	0x0003d08f

08000204 <I2C1_GPIOInits>:
 * 	PB6 --> SCL
 * 	PB7 --> SDA
 *
 */

void I2C1_GPIOInits(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 800020a:	4b0e      	ldr	r3, [pc, #56]	@ (8000244 <I2C1_GPIOInits+0x40>)
 800020c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020e:	2302      	movs	r3, #2
 8000210:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000212:	2301      	movs	r3, #1
 8000214:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000216:	2301      	movs	r3, #1
 8000218:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800021a:	2304      	movs	r3, #4
 800021c:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800021e:	2302      	movs	r3, #2
 8000220:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000222:	2306      	movs	r3, #6
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f975 	bl	8000518 <GPIO_Init>

	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800022e:	2307      	movs	r3, #7
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f96f 	bl	8000518 <GPIO_Init>
}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40020400 	.word	0x40020400

08000248 <I2C1_Inits>:

void I2C1_Inits(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800024c:	4b09      	ldr	r3, [pc, #36]	@ (8000274 <I2C1_Inits+0x2c>)
 800024e:	4a0a      	ldr	r2, [pc, #40]	@ (8000278 <I2C1_Inits+0x30>)
 8000250:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000252:	4b08      	ldr	r3, [pc, #32]	@ (8000274 <I2C1_Inits+0x2c>)
 8000254:	2201      	movs	r2, #1
 8000256:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = 0x61;
 8000258:	4b06      	ldr	r3, [pc, #24]	@ (8000274 <I2C1_Inits+0x2c>)
 800025a:	2261      	movs	r2, #97	@ 0x61
 800025c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800025e:	4b05      	ldr	r3, [pc, #20]	@ (8000274 <I2C1_Inits+0x2c>)
 8000260:	2200      	movs	r2, #0
 8000262:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000264:	4b03      	ldr	r3, [pc, #12]	@ (8000274 <I2C1_Inits+0x2c>)
 8000266:	4a05      	ldr	r2, [pc, #20]	@ (800027c <I2C1_Inits+0x34>)
 8000268:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800026a:	4802      	ldr	r0, [pc, #8]	@ (8000274 <I2C1_Inits+0x2c>)
 800026c:	f000 fc22 	bl	8000ab4 <I2C_Init>
}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}
 8000274:	20000068 	.word	0x20000068
 8000278:	40005400 	.word	0x40005400
 800027c:	000186a0 	.word	0x000186a0

08000280 <GPIO_ButtonInit>:
//	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
//
//	GPIO_Init(&GpioLed);
//}
//
void GPIO_ButtonInit(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0


	memset(&GPIOBtn, 0, sizeof(GPIOBtn));
 8000284:	220c      	movs	r2, #12
 8000286:	2100      	movs	r1, #0
 8000288:	480b      	ldr	r0, [pc, #44]	@ (80002b8 <GPIO_ButtonInit+0x38>)
 800028a:	f000 ff7a 	bl	8001182 <memset>

	GPIOBtn.pGPIOx = GPIOA;
 800028e:	4b0a      	ldr	r3, [pc, #40]	@ (80002b8 <GPIO_ButtonInit+0x38>)
 8000290:	4a0a      	ldr	r2, [pc, #40]	@ (80002bc <GPIO_ButtonInit+0x3c>)
 8000292:	601a      	str	r2, [r3, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000294:	4b08      	ldr	r3, [pc, #32]	@ (80002b8 <GPIO_ButtonInit+0x38>)
 8000296:	2200      	movs	r2, #0
 8000298:	711a      	strb	r2, [r3, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800029a:	4b07      	ldr	r3, [pc, #28]	@ (80002b8 <GPIO_ButtonInit+0x38>)
 800029c:	2200      	movs	r2, #0
 800029e:	715a      	strb	r2, [r3, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002a0:	4b05      	ldr	r3, [pc, #20]	@ (80002b8 <GPIO_ButtonInit+0x38>)
 80002a2:	2202      	movs	r2, #2
 80002a4:	719a      	strb	r2, [r3, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002a6:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <GPIO_ButtonInit+0x38>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	71da      	strb	r2, [r3, #7]

	GPIO_Init(&GPIOBtn);
 80002ac:	4802      	ldr	r0, [pc, #8]	@ (80002b8 <GPIO_ButtonInit+0x38>)
 80002ae:	f000 f933 	bl	8000518 <GPIO_Init>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	2000005c 	.word	0x2000005c
 80002bc:	40020000 	.word	0x40020000

080002c0 <main>:

int main(void){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af02      	add	r7, sp, #8



	I2C1_GPIOInits();
 80002c6:	f7ff ff9d 	bl	8000204 <I2C1_GPIOInits>
	GPIO_ButtonInit();
 80002ca:	f7ff ffd9 	bl	8000280 <GPIO_ButtonInit>
	I2C1_Inits();
 80002ce:	f7ff ffbb 	bl	8000248 <I2C1_Inits>

	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 80002d2:	2101      	movs	r1, #1
 80002d4:	201f      	movs	r0, #31
 80002d6:	f000 fd45 	bl	8000d64 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80002da:	2101      	movs	r1, #1
 80002dc:	2020      	movs	r0, #32
 80002de:	f000 fd41 	bl	8000d64 <I2C_IRQInterruptConfig>

	I2C_PeripheralControl(I2C1, ENABLE);
 80002e2:	2101      	movs	r1, #1
 80002e4:	482b      	ldr	r0, [pc, #172]	@ (8000394 <main+0xd4>)
 80002e6:	f000 fb2e 	bl	8000946 <I2C_PeripheralControl>

	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80002ea:	2101      	movs	r1, #1
 80002ec:	4829      	ldr	r0, [pc, #164]	@ (8000394 <main+0xd4>)
 80002ee:	f000 fd1c 	bl	8000d2a <I2C_ManageAcking>

	//I2C_MasterSendData(&I2C1Handle, some_data, strlen((char*)some_data), SLAVE_ADDR);

	while(1){
		while((GPIO_ReadFromInputPin(GPIOBtn.pGPIOx, GPIOBtn.GPIO_PinConfig.GPIO_PinNumber)));
 80002f2:	bf00      	nop
 80002f4:	4b28      	ldr	r3, [pc, #160]	@ (8000398 <main+0xd8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a27      	ldr	r2, [pc, #156]	@ (8000398 <main+0xd8>)
 80002fa:	7912      	ldrb	r2, [r2, #4]
 80002fc:	4611      	mov	r1, r2
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 fa88 	bl	8000814 <GPIO_ReadFromInputPin>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d1f4      	bne.n	80002f4 <main+0x34>
		delay();
 800030a:	f7ff ff65 	bl	80001d8 <delay>

		commandcode = 0x51;
 800030e:	4b23      	ldr	r3, [pc, #140]	@ (800039c <main+0xdc>)
 8000310:	2251      	movs	r2, #81	@ 0x51
 8000312:	701a      	strb	r2, [r3, #0]
		while(I2C_MasterSendDataIT(&I2C1Handle, &commandcode, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 8000314:	bf00      	nop
 8000316:	2301      	movs	r3, #1
 8000318:	9300      	str	r3, [sp, #0]
 800031a:	2368      	movs	r3, #104	@ 0x68
 800031c:	2201      	movs	r2, #1
 800031e:	491f      	ldr	r1, [pc, #124]	@ (800039c <main+0xdc>)
 8000320:	481f      	ldr	r0, [pc, #124]	@ (80003a0 <main+0xe0>)
 8000322:	f000 fc75 	bl	8000c10 <I2C_MasterSendDataIT>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d1f4      	bne.n	8000316 <main+0x56>

		while(I2C_MasterReceiveDataIT(&I2C1Handle, &len, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 800032c:	bf00      	nop
 800032e:	2301      	movs	r3, #1
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	2368      	movs	r3, #104	@ 0x68
 8000334:	2201      	movs	r2, #1
 8000336:	491b      	ldr	r1, [pc, #108]	@ (80003a4 <main+0xe4>)
 8000338:	4819      	ldr	r0, [pc, #100]	@ (80003a0 <main+0xe0>)
 800033a:	f000 fcac 	bl	8000c96 <I2C_MasterReceiveDataIT>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d1f4      	bne.n	800032e <main+0x6e>

		commandcode = 0x52;
 8000344:	4b15      	ldr	r3, [pc, #84]	@ (800039c <main+0xdc>)
 8000346:	2252      	movs	r2, #82	@ 0x52
 8000348:	701a      	strb	r2, [r3, #0]
		while(I2C_MasterSendDataIT(&I2C1Handle, &commandcode, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 800034a:	bf00      	nop
 800034c:	2301      	movs	r3, #1
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	2368      	movs	r3, #104	@ 0x68
 8000352:	2201      	movs	r2, #1
 8000354:	4911      	ldr	r1, [pc, #68]	@ (800039c <main+0xdc>)
 8000356:	4812      	ldr	r0, [pc, #72]	@ (80003a0 <main+0xe0>)
 8000358:	f000 fc5a 	bl	8000c10 <I2C_MasterSendDataIT>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d1f4      	bne.n	800034c <main+0x8c>

		while(I2C_MasterReceiveDataIT(&I2C1Handle, rcv_buf, len, SLAVE_ADDR, I2C_DISABLE_SR) != I2C_READY);
 8000362:	bf00      	nop
 8000364:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <main+0xe4>)
 8000366:	781a      	ldrb	r2, [r3, #0]
 8000368:	2300      	movs	r3, #0
 800036a:	9300      	str	r3, [sp, #0]
 800036c:	2368      	movs	r3, #104	@ 0x68
 800036e:	490e      	ldr	r1, [pc, #56]	@ (80003a8 <main+0xe8>)
 8000370:	480b      	ldr	r0, [pc, #44]	@ (80003a0 <main+0xe0>)
 8000372:	f000 fc90 	bl	8000c96 <I2C_MasterReceiveDataIT>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d1f3      	bne.n	8000364 <main+0xa4>
		rxComplt = RESET;
 800037c:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <main+0xec>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]

		while(rxComplt != SET);
 8000382:	bf00      	nop
 8000384:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <main+0xec>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d1fb      	bne.n	8000384 <main+0xc4>
		rxComplt = RESET;
 800038c:	4b07      	ldr	r3, [pc, #28]	@ (80003ac <main+0xec>)
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]
		while((GPIO_ReadFromInputPin(GPIOBtn.pGPIOx, GPIOBtn.GPIO_PinConfig.GPIO_PinNumber)));
 8000392:	e7ae      	b.n	80002f2 <main+0x32>
 8000394:	40005400 	.word	0x40005400
 8000398:	2000005c 	.word	0x2000005c
 800039c:	20000058 	.word	0x20000058
 80003a0:	20000068 	.word	0x20000068
 80003a4:	20000059 	.word	0x20000059
 80003a8:	20000038 	.word	0x20000038
 80003ac:	20000034 	.word	0x20000034

080003b0 <I2C1_EV_IRQHandler>:
	}
}

void I2C1_EV_IRQHandler(void){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 80003b4:	4802      	ldr	r0, [pc, #8]	@ (80003c0 <I2C1_EV_IRQHandler+0x10>)
 80003b6:	f000 fe16 	bl	8000fe6 <I2C_EV_IRQHandling>
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	20000068 	.word	0x20000068

080003c4 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 80003c8:	4802      	ldr	r0, [pc, #8]	@ (80003d4 <I2C1_ER_IRQHandler+0x10>)
 80003ca:	f000 fed0 	bl	800116e <I2C_ER_IRQHandling>

}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000068 	.word	0x20000068

080003d8 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv){
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	460b      	mov	r3, r1
 80003e2:	70fb      	strb	r3, [r7, #3]
//	if(AppEv == I2C_EV_TX_CMPLT){
//
//	}else if(AppEv == I2C_EV_RX_CMPLT){
//
//	}else
	if(AppEv == I2C_ERROR_AF){
 80003e4:	78fb      	ldrb	r3, [r7, #3]
 80003e6:	2b05      	cmp	r3, #5
 80003e8:	d107      	bne.n	80003fa <I2C_ApplicationEventCallback+0x22>
		I2C_CloseSendData(pI2CHandle);
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f000 fd6e 	bl	8000ecc <I2C_CloseSendData>

		I2C_GenerateStopCondition(I2C1);
 80003f0:	4804      	ldr	r0, [pc, #16]	@ (8000404 <I2C_ApplicationEventCallback+0x2c>)
 80003f2:	f000 fa98 	bl	8000926 <I2C_GenerateStopCondition>

		while(1);
 80003f6:	bf00      	nop
 80003f8:	e7fd      	b.n	80003f6 <I2C_ApplicationEventCallback+0x1e>
	}

}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40005400 	.word	0x40005400

08000408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000408:	480d      	ldr	r0, [pc, #52]	@ (8000440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800040a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800040c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000410:	480c      	ldr	r0, [pc, #48]	@ (8000444 <LoopForever+0x6>)
  ldr r1, =_edata
 8000412:	490d      	ldr	r1, [pc, #52]	@ (8000448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000414:	4a0d      	ldr	r2, [pc, #52]	@ (800044c <LoopForever+0xe>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000418:	e002      	b.n	8000420 <LoopCopyDataInit>

0800041a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800041c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041e:	3304      	adds	r3, #4

08000420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000424:	d3f9      	bcc.n	800041a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000426:	4a0a      	ldr	r2, [pc, #40]	@ (8000450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000428:	4c0a      	ldr	r4, [pc, #40]	@ (8000454 <LoopForever+0x16>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800042c:	e001      	b.n	8000432 <LoopFillZerobss>

0800042e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000430:	3204      	adds	r2, #4

08000432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000434:	d3fb      	bcc.n	800042e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000436:	f000 fead 	bl	8001194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800043a:	f7ff ff41 	bl	80002c0 <main>

0800043e <LoopForever>:

LoopForever:
  b LoopForever
 800043e:	e7fe      	b.n	800043e <LoopForever>
  ldr   r0, =_estack
 8000440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000448:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800044c:	080011fc 	.word	0x080011fc
  ldr r2, =_sbss
 8000450:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000454:	20000090 	.word	0x20000090

08000458 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000458:	e7fe      	b.n	8000458 <ADC_IRQHandler>
	...

0800045c <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	460b      	mov	r3, r1
 8000466:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000468:	78fb      	ldrb	r3, [r7, #3]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d140      	bne.n	80004f0 <GPIO_PeriClockControl+0x94>
		if(pGPIOx == GPIOA){
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a22      	ldr	r2, [pc, #136]	@ (80004fc <GPIO_PeriClockControl+0xa0>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000476:	4b22      	ldr	r3, [pc, #136]	@ (8000500 <GPIO_PeriClockControl+0xa4>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047a:	4a21      	ldr	r2, [pc, #132]	@ (8000500 <GPIO_PeriClockControl+0xa4>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6313      	str	r3, [r2, #48]	@ 0x30
		}
	}
	else{

	}
}
 8000482:	e035      	b.n	80004f0 <GPIO_PeriClockControl+0x94>
		else if(pGPIOx == GPIOB){
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a1f      	ldr	r2, [pc, #124]	@ (8000504 <GPIO_PeriClockControl+0xa8>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800048c:	4b1c      	ldr	r3, [pc, #112]	@ (8000500 <GPIO_PeriClockControl+0xa4>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000490:	4a1b      	ldr	r2, [pc, #108]	@ (8000500 <GPIO_PeriClockControl+0xa4>)
 8000492:	f043 0302 	orr.w	r3, r3, #2
 8000496:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000498:	e02a      	b.n	80004f0 <GPIO_PeriClockControl+0x94>
		else if(pGPIOx == GPIOC){
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a1a      	ldr	r2, [pc, #104]	@ (8000508 <GPIO_PeriClockControl+0xac>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80004a2:	4b17      	ldr	r3, [pc, #92]	@ (8000500 <GPIO_PeriClockControl+0xa4>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a6:	4a16      	ldr	r2, [pc, #88]	@ (8000500 <GPIO_PeriClockControl+0xa4>)
 80004a8:	f043 0304 	orr.w	r3, r3, #4
 80004ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ae:	e01f      	b.n	80004f0 <GPIO_PeriClockControl+0x94>
		else if(pGPIOx == GPIOD){
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a16      	ldr	r2, [pc, #88]	@ (800050c <GPIO_PeriClockControl+0xb0>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d106      	bne.n	80004c6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80004b8:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <GPIO_PeriClockControl+0xa4>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004bc:	4a10      	ldr	r2, [pc, #64]	@ (8000500 <GPIO_PeriClockControl+0xa4>)
 80004be:	f043 0308 	orr.w	r3, r3, #8
 80004c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c4:	e014      	b.n	80004f0 <GPIO_PeriClockControl+0x94>
		else if(pGPIOx == GPIOE){
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a11      	ldr	r2, [pc, #68]	@ (8000510 <GPIO_PeriClockControl+0xb4>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d106      	bne.n	80004dc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80004ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <GPIO_PeriClockControl+0xa4>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000500 <GPIO_PeriClockControl+0xa4>)
 80004d4:	f043 0310 	orr.w	r3, r3, #16
 80004d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004da:	e009      	b.n	80004f0 <GPIO_PeriClockControl+0x94>
		else if(pGPIOx == GPIOH){
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a0d      	ldr	r2, [pc, #52]	@ (8000514 <GPIO_PeriClockControl+0xb8>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d105      	bne.n	80004f0 <GPIO_PeriClockControl+0x94>
			GPIOH_PCLK_EN();
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <GPIO_PeriClockControl+0xa4>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e8:	4a05      	ldr	r2, [pc, #20]	@ (8000500 <GPIO_PeriClockControl+0xa4>)
 80004ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40020000 	.word	0x40020000
 8000500:	40023800 	.word	0x40023800
 8000504:	40020400 	.word	0x40020400
 8000508:	40020800 	.word	0x40020800
 800050c:	40020c00 	.word	0x40020c00
 8000510:	40021000 	.word	0x40021000
 8000514:	40021c00 	.word	0x40021c00

08000518 <GPIO_Init>:
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2101      	movs	r1, #1
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff ff96 	bl	800045c <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	795b      	ldrb	r3, [r3, #5]
 8000534:	2b03      	cmp	r3, #3
 8000536:	d820      	bhi.n	800057a <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	795b      	ldrb	r3, [r3, #5]
 800053c:	461a      	mov	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	791b      	ldrb	r3, [r3, #4]
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	fa02 f303 	lsl.w	r3, r2, r3
 8000548:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	791b      	ldrb	r3, [r3, #4]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	2103      	movs	r1, #3
 8000558:	fa01 f303 	lsl.w	r3, r1, r3
 800055c:	43db      	mvns	r3, r3
 800055e:	4619      	mov	r1, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	400a      	ands	r2, r1
 8000566:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	6819      	ldr	r1, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	697a      	ldr	r2, [r7, #20]
 8000574:	430a      	orrs	r2, r1
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	e0a1      	b.n	80006be <GPIO_Init+0x1a6>

	}else
	{
		//pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	795b      	ldrb	r3, [r3, #5]
 800057e:	2b04      	cmp	r3, #4
 8000580:	d117      	bne.n	80005b2 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000582:	4b9b      	ldr	r3, [pc, #620]	@ (80007f0 <GPIO_Init+0x2d8>)
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	7912      	ldrb	r2, [r2, #4]
 800058a:	4611      	mov	r1, r2
 800058c:	2201      	movs	r2, #1
 800058e:	408a      	lsls	r2, r1
 8000590:	4611      	mov	r1, r2
 8000592:	4a97      	ldr	r2, [pc, #604]	@ (80007f0 <GPIO_Init+0x2d8>)
 8000594:	430b      	orrs	r3, r1
 8000596:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000598:	4b95      	ldr	r3, [pc, #596]	@ (80007f0 <GPIO_Init+0x2d8>)
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	7912      	ldrb	r2, [r2, #4]
 80005a0:	4611      	mov	r1, r2
 80005a2:	2201      	movs	r2, #1
 80005a4:	408a      	lsls	r2, r1
 80005a6:	43d2      	mvns	r2, r2
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a91      	ldr	r2, [pc, #580]	@ (80007f0 <GPIO_Init+0x2d8>)
 80005ac:	400b      	ands	r3, r1
 80005ae:	6093      	str	r3, [r2, #8]
 80005b0:	e035      	b.n	800061e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	795b      	ldrb	r3, [r3, #5]
 80005b6:	2b05      	cmp	r3, #5
 80005b8:	d117      	bne.n	80005ea <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ba:	4b8d      	ldr	r3, [pc, #564]	@ (80007f0 <GPIO_Init+0x2d8>)
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	7912      	ldrb	r2, [r2, #4]
 80005c2:	4611      	mov	r1, r2
 80005c4:	2201      	movs	r2, #1
 80005c6:	408a      	lsls	r2, r1
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a89      	ldr	r2, [pc, #548]	@ (80007f0 <GPIO_Init+0x2d8>)
 80005cc:	430b      	orrs	r3, r1
 80005ce:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d0:	4b87      	ldr	r3, [pc, #540]	@ (80007f0 <GPIO_Init+0x2d8>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7912      	ldrb	r2, [r2, #4]
 80005d8:	4611      	mov	r1, r2
 80005da:	2201      	movs	r2, #1
 80005dc:	408a      	lsls	r2, r1
 80005de:	43d2      	mvns	r2, r2
 80005e0:	4611      	mov	r1, r2
 80005e2:	4a83      	ldr	r2, [pc, #524]	@ (80007f0 <GPIO_Init+0x2d8>)
 80005e4:	400b      	ands	r3, r1
 80005e6:	60d3      	str	r3, [r2, #12]
 80005e8:	e019      	b.n	800061e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	795b      	ldrb	r3, [r3, #5]
 80005ee:	2b06      	cmp	r3, #6
 80005f0:	d115      	bne.n	800061e <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f2:	4b7f      	ldr	r3, [pc, #508]	@ (80007f0 <GPIO_Init+0x2d8>)
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	7912      	ldrb	r2, [r2, #4]
 80005fa:	4611      	mov	r1, r2
 80005fc:	2201      	movs	r2, #1
 80005fe:	408a      	lsls	r2, r1
 8000600:	4611      	mov	r1, r2
 8000602:	4a7b      	ldr	r2, [pc, #492]	@ (80007f0 <GPIO_Init+0x2d8>)
 8000604:	430b      	orrs	r3, r1
 8000606:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000608:	4b79      	ldr	r3, [pc, #484]	@ (80007f0 <GPIO_Init+0x2d8>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	7912      	ldrb	r2, [r2, #4]
 8000610:	4611      	mov	r1, r2
 8000612:	2201      	movs	r2, #1
 8000614:	408a      	lsls	r2, r1
 8000616:	4611      	mov	r1, r2
 8000618:	4a75      	ldr	r2, [pc, #468]	@ (80007f0 <GPIO_Init+0x2d8>)
 800061a:	430b      	orrs	r3, r1
 800061c:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	791b      	ldrb	r3, [r3, #4]
 8000622:	089b      	lsrs	r3, r3, #2
 8000624:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	f003 0303 	and.w	r3, r3, #3
 800062e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a6f      	ldr	r2, [pc, #444]	@ (80007f4 <GPIO_Init+0x2dc>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d024      	beq.n	8000684 <GPIO_Init+0x16c>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a6e      	ldr	r2, [pc, #440]	@ (80007f8 <GPIO_Init+0x2e0>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d01d      	beq.n	8000680 <GPIO_Init+0x168>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a6c      	ldr	r2, [pc, #432]	@ (80007fc <GPIO_Init+0x2e4>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d016      	beq.n	800067c <GPIO_Init+0x164>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a6b      	ldr	r2, [pc, #428]	@ (8000800 <GPIO_Init+0x2e8>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d00f      	beq.n	8000678 <GPIO_Init+0x160>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a69      	ldr	r2, [pc, #420]	@ (8000804 <GPIO_Init+0x2ec>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d008      	beq.n	8000674 <GPIO_Init+0x15c>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a68      	ldr	r2, [pc, #416]	@ (8000808 <GPIO_Init+0x2f0>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d101      	bne.n	8000670 <GPIO_Init+0x158>
 800066c:	2305      	movs	r3, #5
 800066e:	e00a      	b.n	8000686 <GPIO_Init+0x16e>
 8000670:	2300      	movs	r3, #0
 8000672:	e008      	b.n	8000686 <GPIO_Init+0x16e>
 8000674:	2304      	movs	r3, #4
 8000676:	e006      	b.n	8000686 <GPIO_Init+0x16e>
 8000678:	2303      	movs	r3, #3
 800067a:	e004      	b.n	8000686 <GPIO_Init+0x16e>
 800067c:	2302      	movs	r3, #2
 800067e:	e002      	b.n	8000686 <GPIO_Init+0x16e>
 8000680:	2301      	movs	r3, #1
 8000682:	e000      	b.n	8000686 <GPIO_Init+0x16e>
 8000684:	2300      	movs	r3, #0
 8000686:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000688:	4b60      	ldr	r3, [pc, #384]	@ (800080c <GPIO_Init+0x2f4>)
 800068a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800068c:	4a5f      	ldr	r2, [pc, #380]	@ (800080c <GPIO_Init+0x2f4>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000692:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000694:	7c7a      	ldrb	r2, [r7, #17]
 8000696:	7cbb      	ldrb	r3, [r7, #18]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	fa02 f103 	lsl.w	r1, r2, r3
 800069e:	4a5c      	ldr	r2, [pc, #368]	@ (8000810 <GPIO_Init+0x2f8>)
 80006a0:	7cfb      	ldrb	r3, [r7, #19]
 80006a2:	3302      	adds	r3, #2
 80006a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006a8:	4b51      	ldr	r3, [pc, #324]	@ (80007f0 <GPIO_Init+0x2d8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	7912      	ldrb	r2, [r2, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	2201      	movs	r2, #1
 80006b4:	408a      	lsls	r2, r1
 80006b6:	4611      	mov	r1, r2
 80006b8:	4a4d      	ldr	r2, [pc, #308]	@ (80007f0 <GPIO_Init+0x2d8>)
 80006ba:	430b      	orrs	r3, r1
 80006bc:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	799b      	ldrb	r3, [r3, #6]
 80006c2:	461a      	mov	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	689a      	ldr	r2, [r3, #8]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	791b      	ldrb	r3, [r3, #4]
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	2103      	movs	r1, #3
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	43db      	mvns	r3, r3
 80006e4:	4619      	mov	r1, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	400a      	ands	r2, r1
 80006ec:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	6899      	ldr	r1, [r3, #8]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	430a      	orrs	r2, r1
 80006fc:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	79db      	ldrb	r3, [r3, #7]
 8000702:	461a      	mov	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	68da      	ldr	r2, [r3, #12]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	2103      	movs	r1, #3
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	43db      	mvns	r3, r3
 8000724:	4619      	mov	r1, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	400a      	ands	r2, r1
 800072c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	68d9      	ldr	r1, [r3, #12]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	430a      	orrs	r2, r1
 800073c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7a1b      	ldrb	r3, [r3, #8]
 8000742:	461a      	mov	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	791b      	ldrb	r3, [r3, #4]
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	685a      	ldr	r2, [r3, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	791b      	ldrb	r3, [r3, #4]
 8000758:	4619      	mov	r1, r3
 800075a:	2301      	movs	r3, #1
 800075c:	408b      	lsls	r3, r1
 800075e:	43db      	mvns	r3, r3
 8000760:	4619      	mov	r1, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	400a      	ands	r2, r1
 8000768:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	6859      	ldr	r1, [r3, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	430a      	orrs	r2, r1
 8000778:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	795b      	ldrb	r3, [r3, #5]
 800077e:	2b02      	cmp	r3, #2
 8000780:	d131      	bne.n	80007e6 <GPIO_Init+0x2ce>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	08db      	lsrs	r3, r3, #3
 8000788:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	7c3a      	ldrb	r2, [r7, #16]
 800079a:	3208      	adds	r2, #8
 800079c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	220f      	movs	r2, #15
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	43db      	mvns	r3, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	7c3a      	ldrb	r2, [r7, #16]
 80007b4:	4001      	ands	r1, r0
 80007b6:	3208      	adds	r2, #8
 80007b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	7c3a      	ldrb	r2, [r7, #16]
 80007c2:	3208      	adds	r2, #8
 80007c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7a5b      	ldrb	r3, [r3, #9]
 80007cc:	461a      	mov	r2, r3
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	7c3a      	ldrb	r2, [r7, #16]
 80007de:	4301      	orrs	r1, r0
 80007e0:	3208      	adds	r2, #8
 80007e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40013c00 	.word	0x40013c00
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40020400 	.word	0x40020400
 80007fc:	40020800 	.word	0x40020800
 8000800:	40020c00 	.word	0x40020c00
 8000804:	40021000 	.word	0x40021000
 8000808:	40021c00 	.word	0x40021c00
 800080c:	40023800 	.word	0x40023800
 8000810:	40013800 	.word	0x40013800

08000814 <GPIO_ReadFromInputPin>:
 * @return		- none
 *
 * @Note		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)( (pGPIOx->IDR >> PinNumber) & 0x00000001 );
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	691a      	ldr	r2, [r3, #16]
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	fa22 f303 	lsr.w	r3, r2, r3
 800082a:	b2db      	uxtb	r3, r3
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]
	return value;
 8000832:	7bfb      	ldrb	r3, [r7, #15]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = (SlaveAddr << 1);
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);
 8000872:	78fb      	ldrb	r3, [r7, #3]
 8000874:	f023 0301 	bic.w	r3, r3, #1
 8000878:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800087a:	78fa      	ldrb	r2, [r7, #3]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	611a      	str	r2, [r3, #16]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = (SlaveAddr << 1);
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1;
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80008a6:	78fa      	ldrb	r2, [r7, #3]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	611a      	str	r2, [r3, #16]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

	uint32_t dummy_read;

	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d01f      	beq.n	800090e <I2C_ClearADDRFlag+0x56>
		/* device is in master mode */
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	7f1b      	ldrb	r3, [r3, #28]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d112      	bne.n	80008fc <I2C_ClearADDRFlag+0x44>

			if(pI2CHandle->RxSize == 1){
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6a1b      	ldr	r3, [r3, #32]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d11f      	bne.n	800091e <I2C_ClearADDRFlag+0x66>

				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fa20 	bl	8000d2a <I2C_ManageAcking>

				dummy_read = pI2CHandle->pI2Cx->SR1;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	60fb      	str	r3, [r7, #12]
		/* device is in slave mode */
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 80008fa:	e010      	b.n	800091e <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	60fb      	str	r3, [r7, #12]
}
 800090c:	e007      	b.n	800091e <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	60fb      	str	r3, [r7, #12]
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	601a      	str	r2, [r3, #0]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <I2C_PeripheralControl>:
 *
 * @Note              -

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	460b      	mov	r3, r1
 8000950:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000952:	78fb      	ldrb	r3, [r7, #3]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d106      	bne.n	8000966 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f043 0201 	orr.w	r2, r3, #1
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000964:	e005      	b.n	8000972 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f023 0201 	bic.w	r2, r3, #1
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	601a      	str	r2, [r3, #0]
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d11f      	bne.n	80009d2 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a12      	ldr	r2, [pc, #72]	@ (80009e0 <I2C_PeriClockControl+0x60>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d106      	bne.n	80009a8 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800099a:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <I2C_PeriClockControl+0x64>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	4a11      	ldr	r2, [pc, #68]	@ (80009e4 <I2C_PeriClockControl+0x64>)
 80009a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009a4:	6413      	str	r3, [r2, #64]	@ 0x40
	else
	{
		//TODO
	}

}
 80009a6:	e014      	b.n	80009d2 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a0f      	ldr	r2, [pc, #60]	@ (80009e8 <I2C_PeriClockControl+0x68>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d106      	bne.n	80009be <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <I2C_PeriClockControl+0x64>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	4a0b      	ldr	r2, [pc, #44]	@ (80009e4 <I2C_PeriClockControl+0x64>)
 80009b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009ba:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009bc:	e009      	b.n	80009d2 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <I2C_PeriClockControl+0x6c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d105      	bne.n	80009d2 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 80009c6:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <I2C_PeriClockControl+0x64>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	4a06      	ldr	r2, [pc, #24]	@ (80009e4 <I2C_PeriClockControl+0x64>)
 80009cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80009d0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40005400 	.word	0x40005400
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40005800 	.word	0x40005800
 80009ec:	40005c00 	.word	0x40005c00

080009f0 <RCC_GetPLLOutputClock>:

uint8_t RCC_GetPLLOutputClock(void){
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
	return 0;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <RCC_GetPCLK1Value>:



uint32_t RCC_GetPCLK1Value(void){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000a06:	4b26      	ldr	r3, [pc, #152]	@ (8000aa0 <RCC_GetPCLK1Value+0xa0>)
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	f003 0303 	and.w	r3, r3, #3
 8000a12:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8000a14:	7a7b      	ldrb	r3, [r7, #9]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d102      	bne.n	8000a20 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8000a1a:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <RCC_GetPCLK1Value+0xa4>)
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	e00c      	b.n	8000a3a <RCC_GetPCLK1Value+0x3a>
	}else if(clksrc == 1){
 8000a20:	7a7b      	ldrb	r3, [r7, #9]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d102      	bne.n	8000a2c <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8000a26:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <RCC_GetPCLK1Value+0xa8>)
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	e006      	b.n	8000a3a <RCC_GetPCLK1Value+0x3a>
	}else if(clksrc == 2){
 8000a2c:	7a7b      	ldrb	r3, [r7, #9]
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d103      	bne.n	8000a3a <RCC_GetPCLK1Value+0x3a>
		SystemClk = RCC_GetPLLOutputClock();
 8000a32:	f7ff ffdd 	bl	80009f0 <RCC_GetPLLOutputClock>
 8000a36:	4603      	mov	r3, r0
 8000a38:	60fb      	str	r3, [r7, #12]
	}

	/* AHB */
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000a3a:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <RCC_GetPCLK1Value+0xa0>)
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	091b      	lsrs	r3, r3, #4
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 8000a48:	7a3b      	ldrb	r3, [r7, #8]
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	d802      	bhi.n	8000a54 <RCC_GetPCLK1Value+0x54>
		ahbp = 1;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	72fb      	strb	r3, [r7, #11]
 8000a52:	e005      	b.n	8000a60 <RCC_GetPCLK1Value+0x60>
	}else{
		ahbp = AHB_PreScaler[temp - 8];
 8000a54:	7a3b      	ldrb	r3, [r7, #8]
 8000a56:	3b08      	subs	r3, #8
 8000a58:	4a14      	ldr	r2, [pc, #80]	@ (8000aac <RCC_GetPCLK1Value+0xac>)
 8000a5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a5e:	72fb      	strb	r3, [r7, #11]
	}

	/* APB1 */
	temp = ((RCC->CFGR >> 10) & 0x7);
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <RCC_GetPCLK1Value+0xa0>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	0a9b      	lsrs	r3, r3, #10
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	f003 0307 	and.w	r3, r3, #7
 8000a6c:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 8000a6e:	7a3b      	ldrb	r3, [r7, #8]
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	d802      	bhi.n	8000a7a <RCC_GetPCLK1Value+0x7a>
		apb1p = 1;
 8000a74:	2301      	movs	r3, #1
 8000a76:	72bb      	strb	r3, [r7, #10]
 8000a78:	e005      	b.n	8000a86 <RCC_GetPCLK1Value+0x86>
	}else{
		apb1p = APB1_PreScaler[temp - 4];
 8000a7a:	7a3b      	ldrb	r3, [r7, #8]
 8000a7c:	3b04      	subs	r3, #4
 8000a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab0 <RCC_GetPCLK1Value+0xb0>)
 8000a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a84:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 8000a86:	7afb      	ldrb	r3, [r7, #11]
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a8e:	7abb      	ldrb	r3, [r7, #10]
 8000a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a94:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000a96:	687b      	ldr	r3, [r7, #4]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	00f42400 	.word	0x00f42400
 8000aa8:	007a1200 	.word	0x007a1200
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000010 	.word	0x20000010

08000ab4 <I2C_Init>:
 * @return            -
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]

	/* enable the clock for the i2cx peripheral */
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ff5a 	bl	8000980 <I2C_PeriClockControl>

	/* ACL control bit */
	tempreg |= (pI2CHandle->I2C_Config.I2C_AckControl << I2C_CR1_ACK);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	7a5b      	ldrb	r3, [r3, #9]
 8000ad0:	029b      	lsls	r3, r3, #10
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	601a      	str	r2, [r3, #0]

	/* configure the FREQ field of CR2 */
	tempreg = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000;
 8000ae4:	f7ff ff8c 	bl	8000a00 <RCC_GetPCLK1Value>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	4a46      	ldr	r2, [pc, #280]	@ (8000c04 <I2C_Init+0x150>)
 8000aec:	fba2 2303 	umull	r2, r3, r2, r3
 8000af0:	0c9b      	lsrs	r3, r3, #18
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000b02:	605a      	str	r2, [r3, #4]

	/* program the device own address */
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << I2C_OAR1_ADD71;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7a1b      	ldrb	r3, [r3, #8]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b16:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	609a      	str	r2, [r3, #8]

	/* CCR calculations */
	uint16_t ccr_value = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	4a36      	ldr	r2, [pc, #216]	@ (8000c08 <I2C_Init+0x154>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d80f      	bhi.n	8000b52 <I2C_Init+0x9e>
		/* standard mode */
		ccr_value = RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed );
 8000b32:	f7ff ff65 	bl	8000a00 <RCC_GetPCLK1Value>
 8000b36:	4602      	mov	r2, r0
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000b44:	897b      	ldrh	r3, [r7, #10]
 8000b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	e02c      	b.n	8000bac <I2C_Init+0xf8>
	}else{
		/* fast mode */
		tempreg |= (1 << I2C_CCR_FS);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b58:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7a9b      	ldrb	r3, [r3, #10]
 8000b5e:	039b      	lsls	r3, r3, #14
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	7a9b      	ldrb	r3, [r3, #10]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d10b      	bne.n	8000b86 <I2C_Init+0xd2>
			ccr_value = RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed );
 8000b6e:	f7ff ff47 	bl	8000a00 <RCC_GetPCLK1Value>
 8000b72:	4601      	mov	r1, r0
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b82:	817b      	strh	r3, [r7, #10]
 8000b84:	e00c      	b.n	8000ba0 <I2C_Init+0xec>
		}else{
			ccr_value = RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed );
 8000b86:	f7ff ff3b 	bl	8000a00 <RCC_GetPCLK1Value>
 8000b8a:	4601      	mov	r1, r0
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	009a      	lsls	r2, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b9e:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000ba0:	897b      	ldrh	r3, [r7, #10]
 8000ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	61da      	str	r2, [r3, #28]

	/* T-rise Configuration */

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	4a13      	ldr	r2, [pc, #76]	@ (8000c08 <I2C_Init+0x154>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d809      	bhi.n	8000bd2 <I2C_Init+0x11e>
		/* standard mode */

		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000bbe:	f7ff ff1f 	bl	8000a00 <RCC_GetPCLK1Value>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c04 <I2C_Init+0x150>)
 8000bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bca:	0c9b      	lsrs	r3, r3, #18
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e00d      	b.n	8000bee <I2C_Init+0x13a>

	}else{
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000bd2:	f7ff ff15 	bl	8000a00 <RCC_GetPCLK1Value>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000bdc:	fb02 f303 	mul.w	r3, r2, r3
 8000be0:	0a5b      	lsrs	r3, r3, #9
 8000be2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <I2C_Init+0x158>)
 8000be4:	fba2 2303 	umull	r2, r3, r2, r3
 8000be8:	09db      	lsrs	r3, r3, #7
 8000bea:	3301      	adds	r3, #1
 8000bec:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000bf8:	621a      	str	r2, [r3, #32]
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	431bde83 	.word	0x431bde83
 8000c08:	000186a0 	.word	0x000186a0
 8000c0c:	00044b83 	.word	0x00044b83

08000c10 <I2C_MasterSendDataIT>:
 * @Note              -

 */

uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
 8000c1c:	70fb      	strb	r3, [r7, #3]
	uint8_t busystate = pI2CHandle->TxRxState;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	7f1b      	ldrb	r3, [r3, #28]
 8000c22:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000c24:	7dfb      	ldrb	r3, [r7, #23]
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d030      	beq.n	8000c8c <I2C_MasterSendDataIT+0x7c>
 8000c2a:	7dfb      	ldrb	r3, [r7, #23]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d02d      	beq.n	8000c8c <I2C_MasterSendDataIT+0x7c>
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = Len;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2202      	movs	r2, #2
 8000c40:	771a      	strb	r2, [r3, #28]
		pI2CHandle->DevAddr = SlaveAddr;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	78fa      	ldrb	r2, [r7, #3]
 8000c46:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fdf2 	bl	8000840 <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c6a:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c7a:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000c8a:	605a      	str	r2, [r3, #4]

	}

	return busystate;
 8000c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <I2C_MasterReceiveDataIT>:
 * @Note              -

 */

uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	60f8      	str	r0, [r7, #12]
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	71bb      	strb	r3, [r7, #6]
	uint8_t busystate = pI2CHandle->TxRxState;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	7f1b      	ldrb	r3, [r3, #28]
 8000cb0:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000cb2:	7dfb      	ldrb	r3, [r7, #23]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d033      	beq.n	8000d20 <I2C_MasterReceiveDataIT+0x8a>
 8000cb8:	7dfb      	ldrb	r3, [r7, #23]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d030      	beq.n	8000d20 <I2C_MasterReceiveDataIT+0x8a>
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = Len;
 8000cc4:	79fa      	ldrb	r2, [r7, #7]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = Len;
 8000cd0:	79fa      	ldrb	r2, [r7, #7]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	621a      	str	r2, [r3, #32]
		pI2CHandle->DevAddr = SlaveAddr;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	79ba      	ldrb	r2, [r7, #6]
 8000cda:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ce2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fda8 	bl	8000840 <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000cfe:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d0e:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d1e:	605a      	str	r2, [r3, #4]
	}

	return busystate;
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <I2C_ManageAcking>:
 *
 * @Note              -

 */

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	460b      	mov	r3, r1
 8000d34:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE){
 8000d36:	78fb      	ldrb	r3, [r7, #3]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d106      	bne.n	8000d4a <I2C_ManageAcking+0x20>
		/* Enable the ACK */
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	601a      	str	r2, [r3, #0]

	}else{
		/* Disable the ACK */
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8000d48:	e005      	b.n	8000d56 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	601a      	str	r2, [r3, #0]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <I2C_IRQInterruptConfig>:
 *
 * @Note              -

 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	460a      	mov	r2, r1
 8000d6e:	71fb      	strb	r3, [r7, #7]
 8000d70:	4613      	mov	r3, r2
 8000d72:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000d74:	79bb      	ldrb	r3, [r7, #6]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d133      	bne.n	8000de2 <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b1f      	cmp	r3, #31
 8000d7e:	d80a      	bhi.n	8000d96 <I2C_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000d80:	4b35      	ldr	r3, [pc, #212]	@ (8000e58 <I2C_IRQInterruptConfig+0xf4>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	79fa      	ldrb	r2, [r7, #7]
 8000d86:	2101      	movs	r1, #1
 8000d88:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4a32      	ldr	r2, [pc, #200]	@ (8000e58 <I2C_IRQInterruptConfig+0xf4>)
 8000d90:	430b      	orrs	r3, r1
 8000d92:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000d94:	e059      	b.n	8000e4a <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b1f      	cmp	r3, #31
 8000d9a:	d90f      	bls.n	8000dbc <I2C_IRQInterruptConfig+0x58>
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000da0:	d80c      	bhi.n	8000dbc <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000da2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e5c <I2C_IRQInterruptConfig+0xf8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	79fa      	ldrb	r2, [r7, #7]
 8000da8:	f002 021f 	and.w	r2, r2, #31
 8000dac:	2101      	movs	r1, #1
 8000dae:	fa01 f202 	lsl.w	r2, r1, r2
 8000db2:	4611      	mov	r1, r2
 8000db4:	4a29      	ldr	r2, [pc, #164]	@ (8000e5c <I2C_IRQInterruptConfig+0xf8>)
 8000db6:	430b      	orrs	r3, r1
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	e046      	b.n	8000e4a <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dc0:	d943      	bls.n	8000e4a <I2C_IRQInterruptConfig+0xe6>
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b5f      	cmp	r3, #95	@ 0x5f
 8000dc6:	d840      	bhi.n	8000e4a <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000dc8:	4b25      	ldr	r3, [pc, #148]	@ (8000e60 <I2C_IRQInterruptConfig+0xfc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	79fa      	ldrb	r2, [r7, #7]
 8000dce:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4a21      	ldr	r2, [pc, #132]	@ (8000e60 <I2C_IRQInterruptConfig+0xfc>)
 8000ddc:	430b      	orrs	r3, r1
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	e033      	b.n	8000e4a <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b1f      	cmp	r3, #31
 8000de6:	d80a      	bhi.n	8000dfe <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000de8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e64 <I2C_IRQInterruptConfig+0x100>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	79fa      	ldrb	r2, [r7, #7]
 8000dee:	2101      	movs	r1, #1
 8000df0:	fa01 f202 	lsl.w	r2, r1, r2
 8000df4:	4611      	mov	r1, r2
 8000df6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e64 <I2C_IRQInterruptConfig+0x100>)
 8000df8:	430b      	orrs	r3, r1
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	e025      	b.n	8000e4a <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b1f      	cmp	r3, #31
 8000e02:	d90f      	bls.n	8000e24 <I2C_IRQInterruptConfig+0xc0>
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e08:	d80c      	bhi.n	8000e24 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000e0a:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <I2C_IRQInterruptConfig+0x104>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	79fa      	ldrb	r2, [r7, #7]
 8000e10:	f002 021f 	and.w	r2, r2, #31
 8000e14:	2101      	movs	r1, #1
 8000e16:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <I2C_IRQInterruptConfig+0x104>)
 8000e1e:	430b      	orrs	r3, r1
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e012      	b.n	8000e4a <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	d90f      	bls.n	8000e4a <I2C_IRQInterruptConfig+0xe6>
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b5f      	cmp	r3, #95	@ 0x5f
 8000e2e:	d80c      	bhi.n	8000e4a <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <I2C_IRQInterruptConfig+0x108>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	79fa      	ldrb	r2, [r7, #7]
 8000e36:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e40:	4611      	mov	r1, r2
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <I2C_IRQInterruptConfig+0x108>)
 8000e44:	430b      	orrs	r3, r1
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	e7ff      	b.n	8000e4a <I2C_IRQInterruptConfig+0xe6>
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000e104 	.word	0xe000e104
 8000e60:	e000e10c 	.word	0xe000e10c
 8000e64:	e000e180 	.word	0xe000e180
 8000e68:	e000e184 	.word	0xe000e184
 8000e6c:	e000e18c 	.word	0xe000e18c

08000e70 <I2C_CloseReceiveData>:

void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e86:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000e96:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	7a5b      	ldrb	r3, [r3, #9]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d105      	bne.n	8000ec4 <I2C_CloseReceiveData+0x54>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,ENABLE);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff33 	bl	8000d2a <I2C_ManageAcking>
	}

}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000ee2:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000ef2:	605a      	str	r2, [r3, #4]


	pI2CHandle->TxRxState = I2C_READY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <I2C_MasterHandleTXEInterrupt>:

}



static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle){
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxLen > 0){
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00f      	beq.n	8000f42 <I2C_MasterHandleTXEInterrupt+0x30>
		/* load the data into DR */
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	611a      	str	r2, [r3, #16]

		/* decrement the TxLen */
		pI2CHandle->TxLen--;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	1e5a      	subs	r2, r3, #1
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	615a      	str	r2, [r3, #20]

		/* increment the buffer address */
		pI2CHandle->pTxBuffer++;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	1c5a      	adds	r2, r3, #1
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60da      	str	r2, [r3, #12]
	}
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <I2C_MasterHandleRXNEInterrupt>:
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle){
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]

	/* handle data reception */
	if(pI2CHandle->RxSize == 1){
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a1b      	ldr	r3, [r3, #32]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d10b      	bne.n	8000f76 <I2C_MasterHandleRXNEInterrupt+0x28>
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	691a      	ldr	r2, [r3, #16]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	701a      	strb	r2, [r3, #0]

		pI2CHandle->RxLen--;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	1e5a      	subs	r2, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxSize > 1){
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a1b      	ldr	r3, [r3, #32]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d91a      	bls.n	8000fb4 <I2C_MasterHandleRXNEInterrupt+0x66>
		if(pI2CHandle->RxLen == 2){
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d105      	bne.n	8000f92 <I2C_MasterHandleRXNEInterrupt+0x44>
			I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fecc 	bl	8000d2a <I2C_ManageAcking>
		}

		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	691a      	ldr	r2, [r3, #16]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen--;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	1e5a      	subs	r2, r3, #1
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0){
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d110      	bne.n	8000fde <I2C_MasterHandleRXNEInterrupt+0x90>
		/* close the I2C data reception and notify the application */

		if(pI2CHandle->Sr == I2C_DISABLE_SR){
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10b      	bne.n	8000fde <I2C_MasterHandleRXNEInterrupt+0x90>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fcab 	bl	8000926 <I2C_GenerateStopCondition>

			I2C_CloseReceiveData(pI2CHandle);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff4d 	bl	8000e70 <I2C_CloseReceiveData>

			I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff f9fd 	bl	80003d8 <I2C_ApplicationEventCallback>

		}
	}
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <I2C_EV_IRQHandling>:

void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle){
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for both master and slave mode of a device */

	uint32_t temp1, temp2, temp3;

	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ff8:	617b      	str	r3, [r7, #20]
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001004:	613b      	str	r3, [r7, #16]

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	60fb      	str	r3, [r7, #12]

	/* Handle for interrupt generated by SB event (only for master mode) */
	if(temp1 && temp3){
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d01b      	beq.n	8001050 <I2C_EV_IRQHandling+0x6a>
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d018      	beq.n	8001050 <I2C_EV_IRQHandling+0x6a>
		/* SB flag is set */
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7f1b      	ldrb	r3, [r3, #28]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d108      	bne.n	8001038 <I2C_EV_IRQHandling+0x52>
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7f5b      	ldrb	r3, [r3, #29]
 800102e:	4619      	mov	r1, r3
 8001030:	4610      	mov	r0, r2
 8001032:	f7ff fc15 	bl	8000860 <I2C_ExecuteAddressPhaseWrite>
 8001036:	e00b      	b.n	8001050 <I2C_EV_IRQHandling+0x6a>
		}else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7f1b      	ldrb	r3, [r3, #28]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d107      	bne.n	8001050 <I2C_EV_IRQHandling+0x6a>
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7f5b      	ldrb	r3, [r3, #29]
 8001048:	4619      	mov	r1, r3
 800104a:	4610      	mov	r0, r2
 800104c:	f7ff fc1e 	bl	800088c <I2C_ExecuteAddressPhaseRead>
		}

	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	60fb      	str	r3, [r7, #12]
	/* Handle for interrupt generated by ADDR event
	 * Master mode: Address is sent
	 * Slave mode:  Address matched with own address */
	if(temp1 && temp3){
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d005      	beq.n	800106e <I2C_EV_IRQHandling+0x88>
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <I2C_EV_IRQHandling+0x88>
		/* ADDR flag is set */
		I2C_ClearADDRFlag(pI2CHandle);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff fc25 	bl	80008b8 <I2C_ClearADDRFlag>
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	60fb      	str	r3, [r7, #12]
	/* Handle for interrupt generated by BTF(Byte Transfer Finished) event */
	if(temp1 && temp3){
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d022      	beq.n	80010c6 <I2C_EV_IRQHandling+0xe0>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d01f      	beq.n	80010c6 <I2C_EV_IRQHandling+0xe0>
		/* BTF flag is set */
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7f1b      	ldrb	r3, [r3, #28]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d11b      	bne.n	80010c6 <I2C_EV_IRQHandling+0xe0>

			if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE)){
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001098:	2b00      	cmp	r3, #0
 800109a:	d014      	beq.n	80010c6 <I2C_EV_IRQHandling+0xe0>
				/* BTF , TXE == 1 */
				if(pI2CHandle->TxLen == 0){
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d110      	bne.n	80010c6 <I2C_EV_IRQHandling+0xe0>

					/* Generate STOP condition */
					if(pI2CHandle->Sr == I2C_DISABLE_SR){
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d104      	bne.n	80010b8 <I2C_EV_IRQHandling+0xd2>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fc37 	bl	8000926 <I2C_GenerateStopCondition>
					}

					/* Reset all member elements of the handle structure */
					I2C_CloseSendData(pI2CHandle);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ff07 	bl	8000ecc <I2C_CloseSendData>

					/* notify the application about transmission complete */
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 80010be:	2100      	movs	r1, #0
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff f989 	bl	80003d8 <I2C_ApplicationEventCallback>
		}else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
			;
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	60fb      	str	r3, [r7, #12]
	/* Handle for interrupt generated by STOPF event (slave mode) */
	if(temp1 && temp3){
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00c      	beq.n	80010f2 <I2C_EV_IRQHandling+0x10c>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d009      	beq.n	80010f2 <I2C_EV_IRQHandling+0x10c>
		/* STOPF flag is set */

		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6812      	ldr	r2, [r2, #0]
 80010e8:	601a      	str	r2, [r3, #0]

		/* Notify the application that stop is detected */
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 80010ea:	2102      	movs	r1, #2
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff f973 	bl	80003d8 <I2C_ApplicationEventCallback>
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010fc:	60fb      	str	r3, [r7, #12]
	/* Handle for interrupt generated by TXE event */
	if(temp1 && temp2 && temp3){
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d013      	beq.n	800112c <I2C_EV_IRQHandling+0x146>
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d010      	beq.n	800112c <I2C_EV_IRQHandling+0x146>
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00d      	beq.n	800112c <I2C_EV_IRQHandling+0x146>

		/* Check for device mode (master or slave) */
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d006      	beq.n	800112c <I2C_EV_IRQHandling+0x146>
			/* TXE flag is set */

			/* Data transmission */
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7f1b      	ldrb	r3, [r3, #28]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d102      	bne.n	800112c <I2C_EV_IRQHandling+0x146>

				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff fef3 	bl	8000f12 <I2C_MasterHandleTXEInterrupt>
			}
		}

	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001136:	60fb      	str	r3, [r7, #12]
	/* Handle for interrupt generated by RXNE event */
	if(temp1 && temp2 && temp3){
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d013      	beq.n	8001166 <I2C_EV_IRQHandling+0x180>
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d010      	beq.n	8001166 <I2C_EV_IRQHandling+0x180>
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00d      	beq.n	8001166 <I2C_EV_IRQHandling+0x180>

		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b00      	cmp	r3, #0
 8001156:	d006      	beq.n	8001166 <I2C_EV_IRQHandling+0x180>
			/* RXNE flag is set */
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7f1b      	ldrb	r3, [r3, #28]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d102      	bne.n	8001166 <I2C_EV_IRQHandling+0x180>

				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff fef4 	bl	8000f4e <I2C_MasterHandleRXNEInterrupt>
			}
		}

	}

}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <I2C_ER_IRQHandling>:

void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle){
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]


}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <memset>:
 8001182:	4402      	add	r2, r0
 8001184:	4603      	mov	r3, r0
 8001186:	4293      	cmp	r3, r2
 8001188:	d100      	bne.n	800118c <memset+0xa>
 800118a:	4770      	bx	lr
 800118c:	f803 1b01 	strb.w	r1, [r3], #1
 8001190:	e7f9      	b.n	8001186 <memset+0x4>
	...

08001194 <__libc_init_array>:
 8001194:	b570      	push	{r4, r5, r6, lr}
 8001196:	4d0d      	ldr	r5, [pc, #52]	@ (80011cc <__libc_init_array+0x38>)
 8001198:	4c0d      	ldr	r4, [pc, #52]	@ (80011d0 <__libc_init_array+0x3c>)
 800119a:	1b64      	subs	r4, r4, r5
 800119c:	10a4      	asrs	r4, r4, #2
 800119e:	2600      	movs	r6, #0
 80011a0:	42a6      	cmp	r6, r4
 80011a2:	d109      	bne.n	80011b8 <__libc_init_array+0x24>
 80011a4:	4d0b      	ldr	r5, [pc, #44]	@ (80011d4 <__libc_init_array+0x40>)
 80011a6:	4c0c      	ldr	r4, [pc, #48]	@ (80011d8 <__libc_init_array+0x44>)
 80011a8:	f000 f818 	bl	80011dc <_init>
 80011ac:	1b64      	subs	r4, r4, r5
 80011ae:	10a4      	asrs	r4, r4, #2
 80011b0:	2600      	movs	r6, #0
 80011b2:	42a6      	cmp	r6, r4
 80011b4:	d105      	bne.n	80011c2 <__libc_init_array+0x2e>
 80011b6:	bd70      	pop	{r4, r5, r6, pc}
 80011b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80011bc:	4798      	blx	r3
 80011be:	3601      	adds	r6, #1
 80011c0:	e7ee      	b.n	80011a0 <__libc_init_array+0xc>
 80011c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80011c6:	4798      	blx	r3
 80011c8:	3601      	adds	r6, #1
 80011ca:	e7f2      	b.n	80011b2 <__libc_init_array+0x1e>
 80011cc:	080011f4 	.word	0x080011f4
 80011d0:	080011f4 	.word	0x080011f4
 80011d4:	080011f4 	.word	0x080011f4
 80011d8:	080011f8 	.word	0x080011f8

080011dc <_init>:
 80011dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011de:	bf00      	nop
 80011e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011e2:	bc08      	pop	{r3}
 80011e4:	469e      	mov	lr, r3
 80011e6:	4770      	bx	lr

080011e8 <_fini>:
 80011e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ea:	bf00      	nop
 80011ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ee:	bc08      	pop	{r3}
 80011f0:	469e      	mov	lr, r3
 80011f2:	4770      	bx	lr
