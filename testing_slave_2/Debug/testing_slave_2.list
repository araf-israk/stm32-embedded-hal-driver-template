
testing_slave_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000860  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009f8  08000a00  00001a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009f8  080009f8  00001a00  2**0
                  CONTENTS
  4 .ARM          00000000  080009f8  080009f8  00001a00  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009f8  08000a00  00001a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009f8  080009f8  000019f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009fc  080009fc  000019fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000a00  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000a00  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001199  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000049a  00000000  00000000  00002bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000148  00000000  00000000  00003068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000e8  00000000  00000000  000031b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000211f  00000000  00000000  00003298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000016b7  00000000  00000000  000053b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008f29  00000000  00000000  00006a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000f997  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000478  00000000  00000000  0000f9dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0000fe54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080009e0 	.word	0x080009e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080009e0 	.word	0x080009e0

080001d8 <SPI2_GPIOInits>:
	for(uint32_t i = 0; i < 250000; i++){

	}
}

void SPI2_GPIOInits(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001de:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <SPI2_GPIOInits+0x58>)
 80001e0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001e6:	2305      	movs	r3, #5
 80001e8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001ea:	2300      	movs	r3, #0
 80001ec:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001ee:	2300      	movs	r3, #0
 80001f0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001f2:	2302      	movs	r3, #2
 80001f4:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80001f6:	230d      	movs	r3, #13
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 fa0d 	bl	800061c <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000202:	230f      	movs	r3, #15
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fa07 	bl	800061c <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800020e:	230e      	movs	r3, #14
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 fa01 	bl	800061c <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800021a:	230c      	movs	r3, #12
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f9fb 	bl	800061c <GPIO_Init>
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40020400 	.word	0x40020400

08000234 <SPI2_Inits>:

void SPI2_Inits(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800023a:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <SPI2_Inits+0x38>)
 800023c:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800023e:	2301      	movs	r3, #1
 8000240:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_SLAVE;
 8000242:	2300      	movs	r3, #0
 8000244:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 8000246:	2300      	movs	r3, #0
 8000248:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800024e:	2300      	movs	r3, #0
 8000250:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000252:	2300      	movs	r3, #0
 8000254:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI;
 8000256:	2300      	movs	r3, #0
 8000258:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f88b 	bl	8000378 <SPI_Init>
}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40003800 	.word	0x40003800

08000270 <main>:

int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0

	SPI2_GPIOInits();
 8000276:	f7ff ffaf 	bl	80001d8 <SPI2_GPIOInits>

	SPI2_Inits();
 800027a:	f7ff ffdb 	bl	8000234 <SPI2_Inits>
	while(1){
		SPI_PeripheralControl(SPI2, ENABLE);
 800027e:	2101      	movs	r1, #1
 8000280:	4810      	ldr	r0, [pc, #64]	@ (80002c4 <main+0x54>)
 8000282:	f000 f91a 	bl	80004ba <SPI_PeripheralControl>
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000286:	2201      	movs	r2, #1
 8000288:	490f      	ldr	r1, [pc, #60]	@ (80002c8 <main+0x58>)
 800028a:	480e      	ldr	r0, [pc, #56]	@ (80002c4 <main+0x54>)
 800028c:	f000 f931 	bl	80004f2 <SPI_ReceiveData>
		if(dummy_read == 0x54){
 8000290:	4b0d      	ldr	r3, [pc, #52]	@ (80002c8 <main+0x58>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b54      	cmp	r3, #84	@ 0x54
 8000296:	d10d      	bne.n	80002b4 <main+0x44>
			uint8_t ack_val = 0xF5;
 8000298:	23f5      	movs	r3, #245	@ 0xf5
 800029a:	71fb      	strb	r3, [r7, #7]
			SPI_SendData(SPI2, &ack_val, 1);
 800029c:	1dfb      	adds	r3, r7, #7
 800029e:	2201      	movs	r2, #1
 80002a0:	4619      	mov	r1, r3
 80002a2:	4808      	ldr	r0, [pc, #32]	@ (80002c4 <main+0x54>)
 80002a4:	f000 f8d2 	bl	800044c <SPI_SendData>
		}
		while(!(GPIO_ReadFromInputPin(GPIOB, GPIO_PIN_NO_12))){
 80002a8:	e004      	b.n	80002b4 <main+0x44>
			SPI_ReceiveData(SPI2, cmd, 2);
 80002aa:	2202      	movs	r2, #2
 80002ac:	4907      	ldr	r1, [pc, #28]	@ (80002cc <main+0x5c>)
 80002ae:	4805      	ldr	r0, [pc, #20]	@ (80002c4 <main+0x54>)
 80002b0:	f000 f91f 	bl	80004f2 <SPI_ReceiveData>
		while(!(GPIO_ReadFromInputPin(GPIOB, GPIO_PIN_NO_12))){
 80002b4:	210c      	movs	r1, #12
 80002b6:	4806      	ldr	r0, [pc, #24]	@ (80002d0 <main+0x60>)
 80002b8:	f000 fb2e 	bl	8000918 <GPIO_ReadFromInputPin>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0f3      	beq.n	80002aa <main+0x3a>
		SPI_PeripheralControl(SPI2, ENABLE);
 80002c2:	e7dc      	b.n	800027e <main+0xe>
 80002c4:	40003800 	.word	0x40003800
 80002c8:	2000001c 	.word	0x2000001c
 80002cc:	20000020 	.word	0x20000020
 80002d0:	40020400 	.word	0x40020400

080002d4 <SPI_PeriClockControl>:
 * @return		- none
 *
 * @Note		- none
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	460b      	mov	r3, r1
 80002de:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80002e0:	78fb      	ldrb	r3, [r7, #3]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d135      	bne.n	8000352 <SPI_PeriClockControl+0x7e>
		if(pSPIx == SPI1){
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000360 <SPI_PeriClockControl+0x8c>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 80002ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000364 <SPI_PeriClockControl+0x90>)
 80002f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000364 <SPI_PeriClockControl+0x90>)
 80002f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002f8:	6453      	str	r3, [r2, #68]	@ 0x44
	}
	else{

	}

}
 80002fa:	e02a      	b.n	8000352 <SPI_PeriClockControl+0x7e>
		else if(pSPIx == SPI2){
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000368 <SPI_PeriClockControl+0x94>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000304:	4b17      	ldr	r3, [pc, #92]	@ (8000364 <SPI_PeriClockControl+0x90>)
 8000306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000308:	4a16      	ldr	r2, [pc, #88]	@ (8000364 <SPI_PeriClockControl+0x90>)
 800030a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800030e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000310:	e01f      	b.n	8000352 <SPI_PeriClockControl+0x7e>
		else if(pSPIx == SPI3){
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a15      	ldr	r2, [pc, #84]	@ (800036c <SPI_PeriClockControl+0x98>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 800031a:	4b12      	ldr	r3, [pc, #72]	@ (8000364 <SPI_PeriClockControl+0x90>)
 800031c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800031e:	4a11      	ldr	r2, [pc, #68]	@ (8000364 <SPI_PeriClockControl+0x90>)
 8000320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000324:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000326:	e014      	b.n	8000352 <SPI_PeriClockControl+0x7e>
		else if(pSPIx == SPI4){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a11      	ldr	r2, [pc, #68]	@ (8000370 <SPI_PeriClockControl+0x9c>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <SPI_PeriClockControl+0x6a>
			SPI4_PCLK_EN();
 8000330:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <SPI_PeriClockControl+0x90>)
 8000332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000334:	4a0b      	ldr	r2, [pc, #44]	@ (8000364 <SPI_PeriClockControl+0x90>)
 8000336:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800033a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800033c:	e009      	b.n	8000352 <SPI_PeriClockControl+0x7e>
		else if(pSPIx == SPI5){
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a0c      	ldr	r2, [pc, #48]	@ (8000374 <SPI_PeriClockControl+0xa0>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d105      	bne.n	8000352 <SPI_PeriClockControl+0x7e>
			SPI5_PCLK_EN();
 8000346:	4b07      	ldr	r3, [pc, #28]	@ (8000364 <SPI_PeriClockControl+0x90>)
 8000348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800034a:	4a06      	ldr	r2, [pc, #24]	@ (8000364 <SPI_PeriClockControl+0x90>)
 800034c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000350:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40013000 	.word	0x40013000
 8000364:	40023800 	.word	0x40023800
 8000368:	40003800 	.word	0x40003800
 800036c:	40003c00 	.word	0x40003c00
 8000370:	40013400 	.word	0x40013400
 8000374:	40015000 	.word	0x40015000

08000378 <SPI_Init>:
 * @return		- none
 *
 * @Note		- none
 */

void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]

	/* peripheral clock enable*/
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2101      	movs	r1, #1
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ffa4 	bl	80002d4 <SPI_PeriClockControl>

	/*first configure the SPI_CR1 register*/

	uint32_t tempreg = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
	/*Configure the device mode*/
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	791b      	ldrb	r3, [r3, #4]
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	4313      	orrs	r3, r2
 800039a:	60fb      	str	r3, [r7, #12]

	/*Configure the bus*/
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	795b      	ldrb	r3, [r3, #5]
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d104      	bne.n	80003ae <SPI_Init+0x36>
		/* 1 line bi-di mode should be cleared*/
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	e014      	b.n	80003d8 <SPI_Init+0x60>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	795b      	ldrb	r3, [r3, #5]
 80003b2:	2b02      	cmp	r3, #2
 80003b4:	d104      	bne.n	80003c0 <SPI_Init+0x48>
		/* 1 line bi-di mode should be set*/
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	e00b      	b.n	80003d8 <SPI_Init+0x60>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	795b      	ldrb	r3, [r3, #5]
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	d107      	bne.n	80003d8 <SPI_Init+0x60>
		/* 1 line bi-di mode should be cleared*/
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80003ce:	60fb      	str	r3, [r7, #12]
		/* RXONLY bit must be set*/
		tempreg |= (1 << SPI_CR1_RXONLY);
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003d6:	60fb      	str	r3, [r7, #12]
	}

	/* Configure the spi serial clock speed (baud rate) */
	tempreg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	799b      	ldrb	r3, [r3, #6]
 80003dc:	00db      	lsls	r3, r3, #3
 80003de:	68fa      	ldr	r2, [r7, #12]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	60fb      	str	r3, [r7, #12]

	/* Configure the DFF */
	tempreg |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	79db      	ldrb	r3, [r3, #7]
 80003e8:	02db      	lsls	r3, r3, #11
 80003ea:	68fa      	ldr	r2, [r7, #12]
 80003ec:	4313      	orrs	r3, r2
 80003ee:	60fb      	str	r3, [r7, #12]

	/* Configure the CPOL */
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	7a1b      	ldrb	r3, [r3, #8]
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	68fa      	ldr	r2, [r7, #12]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	60fb      	str	r3, [r7, #12]

	/* Configure the CPHA*/
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	7a5b      	ldrb	r3, [r3, #9]
 8000400:	461a      	mov	r2, r3
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	4313      	orrs	r3, r2
 8000406:	60fb      	str	r3, [r7, #12]

	/* Configure the SSM */
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	7a9b      	ldrb	r3, [r3, #10]
 800040c:	025b      	lsls	r3, r3, #9
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	4313      	orrs	r3, r2
 8000412:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	601a      	str	r2, [r3, #0]
}
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <SPI_GetFlagStatus>:

void SPI_DeInit(SPI_RegDef_t *pSPIx){

}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	4013      	ands	r3, r2
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 800043a:	2301      	movs	r3, #1
 800043c:	e000      	b.n	8000440 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800043e:	2300      	movs	r3, #0
}
 8000440:	4618      	mov	r0, r3
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <SPI_SendData>:
 * @return		- none
 *
 * @Note		- none
 */

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	607a      	str	r2, [r7, #4]

	while(Len > 0){
 8000458:	e027      	b.n	80004aa <SPI_SendData+0x5e>
		/* Wait until TXE is set*/
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 800045a:	bf00      	nop
 800045c:	2102      	movs	r1, #2
 800045e:	68f8      	ldr	r0, [r7, #12]
 8000460:	f7ff ffe0 	bl	8000424 <SPI_GetFlagStatus>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d0f8      	beq.n	800045c <SPI_SendData+0x10>

		/* Check the DFF bit in CR1*/
		if((pSPIx->CR1 & (1 << SPI_CR1_DFF))){
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000472:	2b00      	cmp	r3, #0
 8000474:	d00e      	beq.n	8000494 <SPI_SendData+0x48>
			/* 16 bit DFF */
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	461a      	mov	r2, r3
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	60da      	str	r2, [r3, #12]
			Len--;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	3b01      	subs	r3, #1
 8000484:	607b      	str	r3, [r7, #4]
			Len--;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	3b01      	subs	r3, #1
 800048a:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	3301      	adds	r3, #1
 8000490:	60bb      	str	r3, [r7, #8]
 8000492:	e00a      	b.n	80004aa <SPI_SendData+0x5e>
		}else{
			/* 8 bit DFF */
			pSPIx->DR = *pTxBuffer;
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	461a      	mov	r2, r3
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	60da      	str	r2, [r3, #12]
			Len--;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	3301      	adds	r3, #1
 80004a8:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d1d4      	bne.n	800045a <SPI_SendData+0xe>
		}
	}
}
 80004b0:	bf00      	nop
 80004b2:	bf00      	nop
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <SPI_PeripheralControl>:
 * @return		- none
 *
 * @Note		- none
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 80004ba:	b480      	push	{r7}
 80004bc:	b083      	sub	sp, #12
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
 80004c2:	460b      	mov	r3, r1
 80004c4:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80004c6:	78fb      	ldrb	r3, [r7, #3]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d106      	bne.n	80004da <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 80004d8:	e005      	b.n	80004e6 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <SPI_ReceiveData>:
 * @return		- none
 *
 * @Note		- none
 */

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len){
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b084      	sub	sp, #16
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	60f8      	str	r0, [r7, #12]
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 80004fe:	e027      	b.n	8000550 <SPI_ReceiveData+0x5e>
		/* Wait until RXNE is set*/
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000500:	bf00      	nop
 8000502:	2101      	movs	r1, #1
 8000504:	68f8      	ldr	r0, [r7, #12]
 8000506:	f7ff ff8d 	bl	8000424 <SPI_GetFlagStatus>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0f8      	beq.n	8000502 <SPI_ReceiveData+0x10>

		/* Check the DFF bit in CR1*/
		if((pSPIx->CR1 & (1 << SPI_CR1_DFF))){
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00e      	beq.n	800053a <SPI_ReceiveData+0x48>
			/* 16 bit DFF */
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	b29a      	uxth	r2, r3
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	801a      	strh	r2, [r3, #0]
			Len--;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3b01      	subs	r3, #1
 800052a:	607b      	str	r3, [r7, #4]
			Len--;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3b01      	subs	r3, #1
 8000530:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxBuffer++;
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	3301      	adds	r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	e00a      	b.n	8000550 <SPI_ReceiveData+0x5e>
		}else{
			/* 8 bit DFF */
			*pRxBuffer = pSPIx->DR;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	b2da      	uxtb	r2, r3
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	701a      	strb	r2, [r3, #0]
			Len--;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3b01      	subs	r3, #1
 8000548:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	3301      	adds	r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d1d4      	bne.n	8000500 <SPI_ReceiveData+0xe>
		}
	}
}
 8000556:	bf00      	nop
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d140      	bne.n	80005f4 <GPIO_PeriClockControl+0x94>
		if(pGPIOx == GPIOA){
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a22      	ldr	r2, [pc, #136]	@ (8000600 <GPIO_PeriClockControl+0xa0>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d106      	bne.n	8000588 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800057a:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <GPIO_PeriClockControl+0xa4>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a21      	ldr	r2, [pc, #132]	@ (8000604 <GPIO_PeriClockControl+0xa4>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
		}
	}
	else{

	}
}
 8000586:	e035      	b.n	80005f4 <GPIO_PeriClockControl+0x94>
		else if(pGPIOx == GPIOB){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a1f      	ldr	r2, [pc, #124]	@ (8000608 <GPIO_PeriClockControl+0xa8>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d106      	bne.n	800059e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000590:	4b1c      	ldr	r3, [pc, #112]	@ (8000604 <GPIO_PeriClockControl+0xa4>)
 8000592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000594:	4a1b      	ldr	r2, [pc, #108]	@ (8000604 <GPIO_PeriClockControl+0xa4>)
 8000596:	f043 0302 	orr.w	r3, r3, #2
 800059a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800059c:	e02a      	b.n	80005f4 <GPIO_PeriClockControl+0x94>
		else if(pGPIOx == GPIOC){
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a1a      	ldr	r2, [pc, #104]	@ (800060c <GPIO_PeriClockControl+0xac>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d106      	bne.n	80005b4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80005a6:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <GPIO_PeriClockControl+0xa4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a16      	ldr	r2, [pc, #88]	@ (8000604 <GPIO_PeriClockControl+0xa4>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005b2:	e01f      	b.n	80005f4 <GPIO_PeriClockControl+0x94>
		else if(pGPIOx == GPIOD){
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a16      	ldr	r2, [pc, #88]	@ (8000610 <GPIO_PeriClockControl+0xb0>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d106      	bne.n	80005ca <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80005bc:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <GPIO_PeriClockControl+0xa4>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c0:	4a10      	ldr	r2, [pc, #64]	@ (8000604 <GPIO_PeriClockControl+0xa4>)
 80005c2:	f043 0308 	orr.w	r3, r3, #8
 80005c6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005c8:	e014      	b.n	80005f4 <GPIO_PeriClockControl+0x94>
		else if(pGPIOx == GPIOE){
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a11      	ldr	r2, [pc, #68]	@ (8000614 <GPIO_PeriClockControl+0xb4>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d106      	bne.n	80005e0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80005d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <GPIO_PeriClockControl+0xa4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <GPIO_PeriClockControl+0xa4>)
 80005d8:	f043 0310 	orr.w	r3, r3, #16
 80005dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005de:	e009      	b.n	80005f4 <GPIO_PeriClockControl+0x94>
		else if(pGPIOx == GPIOH){
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000618 <GPIO_PeriClockControl+0xb8>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d105      	bne.n	80005f4 <GPIO_PeriClockControl+0x94>
			GPIOH_PCLK_EN();
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <GPIO_PeriClockControl+0xa4>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ec:	4a05      	ldr	r2, [pc, #20]	@ (8000604 <GPIO_PeriClockControl+0xa4>)
 80005ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40020000 	.word	0x40020000
 8000604:	40023800 	.word	0x40023800
 8000608:	40020400 	.word	0x40020400
 800060c:	40020800 	.word	0x40020800
 8000610:	40020c00 	.word	0x40020c00
 8000614:	40021000 	.word	0x40021000
 8000618:	40021c00 	.word	0x40021c00

0800061c <GPIO_Init>:
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2101      	movs	r1, #1
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff ff96 	bl	8000560 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	795b      	ldrb	r3, [r3, #5]
 8000638:	2b03      	cmp	r3, #3
 800063a:	d820      	bhi.n	800067e <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	795b      	ldrb	r3, [r3, #5]
 8000640:	461a      	mov	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	fa02 f303 	lsl.w	r3, r2, r3
 800064c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	2103      	movs	r1, #3
 800065c:	fa01 f303 	lsl.w	r3, r1, r3
 8000660:	43db      	mvns	r3, r3
 8000662:	4619      	mov	r1, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	400a      	ands	r2, r1
 800066a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	6819      	ldr	r1, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	697a      	ldr	r2, [r7, #20]
 8000678:	430a      	orrs	r2, r1
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	e0a1      	b.n	80007c2 <GPIO_Init+0x1a6>

	}else
	{
		//pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	795b      	ldrb	r3, [r3, #5]
 8000682:	2b04      	cmp	r3, #4
 8000684:	d117      	bne.n	80006b6 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000686:	4b9b      	ldr	r3, [pc, #620]	@ (80008f4 <GPIO_Init+0x2d8>)
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	7912      	ldrb	r2, [r2, #4]
 800068e:	4611      	mov	r1, r2
 8000690:	2201      	movs	r2, #1
 8000692:	408a      	lsls	r2, r1
 8000694:	4611      	mov	r1, r2
 8000696:	4a97      	ldr	r2, [pc, #604]	@ (80008f4 <GPIO_Init+0x2d8>)
 8000698:	430b      	orrs	r3, r1
 800069a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800069c:	4b95      	ldr	r3, [pc, #596]	@ (80008f4 <GPIO_Init+0x2d8>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	7912      	ldrb	r2, [r2, #4]
 80006a4:	4611      	mov	r1, r2
 80006a6:	2201      	movs	r2, #1
 80006a8:	408a      	lsls	r2, r1
 80006aa:	43d2      	mvns	r2, r2
 80006ac:	4611      	mov	r1, r2
 80006ae:	4a91      	ldr	r2, [pc, #580]	@ (80008f4 <GPIO_Init+0x2d8>)
 80006b0:	400b      	ands	r3, r1
 80006b2:	6093      	str	r3, [r2, #8]
 80006b4:	e035      	b.n	8000722 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	795b      	ldrb	r3, [r3, #5]
 80006ba:	2b05      	cmp	r3, #5
 80006bc:	d117      	bne.n	80006ee <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006be:	4b8d      	ldr	r3, [pc, #564]	@ (80008f4 <GPIO_Init+0x2d8>)
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	7912      	ldrb	r2, [r2, #4]
 80006c6:	4611      	mov	r1, r2
 80006c8:	2201      	movs	r2, #1
 80006ca:	408a      	lsls	r2, r1
 80006cc:	4611      	mov	r1, r2
 80006ce:	4a89      	ldr	r2, [pc, #548]	@ (80008f4 <GPIO_Init+0x2d8>)
 80006d0:	430b      	orrs	r3, r1
 80006d2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d4:	4b87      	ldr	r3, [pc, #540]	@ (80008f4 <GPIO_Init+0x2d8>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	7912      	ldrb	r2, [r2, #4]
 80006dc:	4611      	mov	r1, r2
 80006de:	2201      	movs	r2, #1
 80006e0:	408a      	lsls	r2, r1
 80006e2:	43d2      	mvns	r2, r2
 80006e4:	4611      	mov	r1, r2
 80006e6:	4a83      	ldr	r2, [pc, #524]	@ (80008f4 <GPIO_Init+0x2d8>)
 80006e8:	400b      	ands	r3, r1
 80006ea:	60d3      	str	r3, [r2, #12]
 80006ec:	e019      	b.n	8000722 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	795b      	ldrb	r3, [r3, #5]
 80006f2:	2b06      	cmp	r3, #6
 80006f4:	d115      	bne.n	8000722 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006f6:	4b7f      	ldr	r3, [pc, #508]	@ (80008f4 <GPIO_Init+0x2d8>)
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	7912      	ldrb	r2, [r2, #4]
 80006fe:	4611      	mov	r1, r2
 8000700:	2201      	movs	r2, #1
 8000702:	408a      	lsls	r2, r1
 8000704:	4611      	mov	r1, r2
 8000706:	4a7b      	ldr	r2, [pc, #492]	@ (80008f4 <GPIO_Init+0x2d8>)
 8000708:	430b      	orrs	r3, r1
 800070a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800070c:	4b79      	ldr	r3, [pc, #484]	@ (80008f4 <GPIO_Init+0x2d8>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	7912      	ldrb	r2, [r2, #4]
 8000714:	4611      	mov	r1, r2
 8000716:	2201      	movs	r2, #1
 8000718:	408a      	lsls	r2, r1
 800071a:	4611      	mov	r1, r2
 800071c:	4a75      	ldr	r2, [pc, #468]	@ (80008f4 <GPIO_Init+0x2d8>)
 800071e:	430b      	orrs	r3, r1
 8000720:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	089b      	lsrs	r3, r3, #2
 8000728:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	791b      	ldrb	r3, [r3, #4]
 800072e:	f003 0303 	and.w	r3, r3, #3
 8000732:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a6f      	ldr	r2, [pc, #444]	@ (80008f8 <GPIO_Init+0x2dc>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d024      	beq.n	8000788 <GPIO_Init+0x16c>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a6e      	ldr	r2, [pc, #440]	@ (80008fc <GPIO_Init+0x2e0>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d01d      	beq.n	8000784 <GPIO_Init+0x168>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a6c      	ldr	r2, [pc, #432]	@ (8000900 <GPIO_Init+0x2e4>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d016      	beq.n	8000780 <GPIO_Init+0x164>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a6b      	ldr	r2, [pc, #428]	@ (8000904 <GPIO_Init+0x2e8>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d00f      	beq.n	800077c <GPIO_Init+0x160>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a69      	ldr	r2, [pc, #420]	@ (8000908 <GPIO_Init+0x2ec>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d008      	beq.n	8000778 <GPIO_Init+0x15c>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a68      	ldr	r2, [pc, #416]	@ (800090c <GPIO_Init+0x2f0>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d101      	bne.n	8000774 <GPIO_Init+0x158>
 8000770:	2305      	movs	r3, #5
 8000772:	e00a      	b.n	800078a <GPIO_Init+0x16e>
 8000774:	2300      	movs	r3, #0
 8000776:	e008      	b.n	800078a <GPIO_Init+0x16e>
 8000778:	2304      	movs	r3, #4
 800077a:	e006      	b.n	800078a <GPIO_Init+0x16e>
 800077c:	2303      	movs	r3, #3
 800077e:	e004      	b.n	800078a <GPIO_Init+0x16e>
 8000780:	2302      	movs	r3, #2
 8000782:	e002      	b.n	800078a <GPIO_Init+0x16e>
 8000784:	2301      	movs	r3, #1
 8000786:	e000      	b.n	800078a <GPIO_Init+0x16e>
 8000788:	2300      	movs	r3, #0
 800078a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800078c:	4b60      	ldr	r3, [pc, #384]	@ (8000910 <GPIO_Init+0x2f4>)
 800078e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000790:	4a5f      	ldr	r2, [pc, #380]	@ (8000910 <GPIO_Init+0x2f4>)
 8000792:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000796:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000798:	7c7a      	ldrb	r2, [r7, #17]
 800079a:	7cbb      	ldrb	r3, [r7, #18]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	fa02 f103 	lsl.w	r1, r2, r3
 80007a2:	4a5c      	ldr	r2, [pc, #368]	@ (8000914 <GPIO_Init+0x2f8>)
 80007a4:	7cfb      	ldrb	r3, [r7, #19]
 80007a6:	3302      	adds	r3, #2
 80007a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80007ac:	4b51      	ldr	r3, [pc, #324]	@ (80008f4 <GPIO_Init+0x2d8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	7912      	ldrb	r2, [r2, #4]
 80007b4:	4611      	mov	r1, r2
 80007b6:	2201      	movs	r2, #1
 80007b8:	408a      	lsls	r2, r1
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a4d      	ldr	r2, [pc, #308]	@ (80008f4 <GPIO_Init+0x2d8>)
 80007be:	430b      	orrs	r3, r1
 80007c0:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	799b      	ldrb	r3, [r3, #6]
 80007c6:	461a      	mov	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	791b      	ldrb	r3, [r3, #4]
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	689a      	ldr	r2, [r3, #8]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	791b      	ldrb	r3, [r3, #4]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	2103      	movs	r1, #3
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	43db      	mvns	r3, r3
 80007e8:	4619      	mov	r1, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	400a      	ands	r2, r1
 80007f0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	6899      	ldr	r1, [r3, #8]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	430a      	orrs	r2, r1
 8000800:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	79db      	ldrb	r3, [r3, #7]
 8000806:	461a      	mov	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	68da      	ldr	r2, [r3, #12]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	791b      	ldrb	r3, [r3, #4]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	2103      	movs	r1, #3
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43db      	mvns	r3, r3
 8000828:	4619      	mov	r1, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	400a      	ands	r2, r1
 8000830:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	68d9      	ldr	r1, [r3, #12]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	430a      	orrs	r2, r1
 8000840:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	7a1b      	ldrb	r3, [r3, #8]
 8000846:	461a      	mov	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	791b      	ldrb	r3, [r3, #4]
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	791b      	ldrb	r3, [r3, #4]
 800085c:	4619      	mov	r1, r3
 800085e:	2301      	movs	r3, #1
 8000860:	408b      	lsls	r3, r1
 8000862:	43db      	mvns	r3, r3
 8000864:	4619      	mov	r1, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	400a      	ands	r2, r1
 800086c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	6859      	ldr	r1, [r3, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	430a      	orrs	r2, r1
 800087c:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	795b      	ldrb	r3, [r3, #5]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d131      	bne.n	80008ea <GPIO_Init+0x2ce>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	791b      	ldrb	r3, [r3, #4]
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	791b      	ldrb	r3, [r3, #4]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	7c3a      	ldrb	r2, [r7, #16]
 800089e:	3208      	adds	r2, #8
 80008a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	220f      	movs	r2, #15
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43db      	mvns	r3, r3
 80008b0:	4618      	mov	r0, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	7c3a      	ldrb	r2, [r7, #16]
 80008b8:	4001      	ands	r1, r0
 80008ba:	3208      	adds	r2, #8
 80008bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	7c3a      	ldrb	r2, [r7, #16]
 80008c6:	3208      	adds	r2, #8
 80008c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	7a5b      	ldrb	r3, [r3, #9]
 80008d0:	461a      	mov	r2, r3
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	7c3a      	ldrb	r2, [r7, #16]
 80008e2:	4301      	orrs	r1, r0
 80008e4:	3208      	adds	r2, #8
 80008e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40013c00 	.word	0x40013c00
 80008f8:	40020000 	.word	0x40020000
 80008fc:	40020400 	.word	0x40020400
 8000900:	40020800 	.word	0x40020800
 8000904:	40020c00 	.word	0x40020c00
 8000908:	40021000 	.word	0x40021000
 800090c:	40021c00 	.word	0x40021c00
 8000910:	40023800 	.word	0x40023800
 8000914:	40013800 	.word	0x40013800

08000918 <GPIO_ReadFromInputPin>:
 * @return		- none
 *
 * @Note		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)( (pGPIOx->IDR >> PinNumber) & 0x00000001 );
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	691a      	ldr	r2, [r3, #16]
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	fa22 f303 	lsr.w	r3, r2, r3
 800092e:	b2db      	uxtb	r3, r3
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	73fb      	strb	r3, [r7, #15]
	return value;
 8000936:	7bfb      	ldrb	r3, [r7, #15]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000944:	480d      	ldr	r0, [pc, #52]	@ (800097c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000946:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000948:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <LoopForever+0x6>)
  ldr r1, =_edata
 800094e:	490d      	ldr	r1, [pc, #52]	@ (8000984 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000950:	4a0d      	ldr	r2, [pc, #52]	@ (8000988 <LoopForever+0xe>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000964:	4c0a      	ldr	r4, [pc, #40]	@ (8000990 <LoopForever+0x16>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000972:	f000 f811 	bl	8000998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000976:	f7ff fc7b 	bl	8000270 <main>

0800097a <LoopForever>:

LoopForever:
  b LoopForever
 800097a:	e7fe      	b.n	800097a <LoopForever>
  ldr   r0, =_estack
 800097c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000988:	08000a00 	.word	0x08000a00
  ldr r2, =_sbss
 800098c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000990:	20000024 	.word	0x20000024

08000994 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC_IRQHandler>
	...

08000998 <__libc_init_array>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	4d0d      	ldr	r5, [pc, #52]	@ (80009d0 <__libc_init_array+0x38>)
 800099c:	4c0d      	ldr	r4, [pc, #52]	@ (80009d4 <__libc_init_array+0x3c>)
 800099e:	1b64      	subs	r4, r4, r5
 80009a0:	10a4      	asrs	r4, r4, #2
 80009a2:	2600      	movs	r6, #0
 80009a4:	42a6      	cmp	r6, r4
 80009a6:	d109      	bne.n	80009bc <__libc_init_array+0x24>
 80009a8:	4d0b      	ldr	r5, [pc, #44]	@ (80009d8 <__libc_init_array+0x40>)
 80009aa:	4c0c      	ldr	r4, [pc, #48]	@ (80009dc <__libc_init_array+0x44>)
 80009ac:	f000 f818 	bl	80009e0 <_init>
 80009b0:	1b64      	subs	r4, r4, r5
 80009b2:	10a4      	asrs	r4, r4, #2
 80009b4:	2600      	movs	r6, #0
 80009b6:	42a6      	cmp	r6, r4
 80009b8:	d105      	bne.n	80009c6 <__libc_init_array+0x2e>
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
 80009bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c0:	4798      	blx	r3
 80009c2:	3601      	adds	r6, #1
 80009c4:	e7ee      	b.n	80009a4 <__libc_init_array+0xc>
 80009c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ca:	4798      	blx	r3
 80009cc:	3601      	adds	r6, #1
 80009ce:	e7f2      	b.n	80009b6 <__libc_init_array+0x1e>
 80009d0:	080009f8 	.word	0x080009f8
 80009d4:	080009f8 	.word	0x080009f8
 80009d8:	080009f8 	.word	0x080009f8
 80009dc:	080009fc 	.word	0x080009fc

080009e0 <_init>:
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e2:	bf00      	nop
 80009e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009e6:	bc08      	pop	{r3}
 80009e8:	469e      	mov	lr, r3
 80009ea:	4770      	bx	lr

080009ec <_fini>:
 80009ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ee:	bf00      	nop
 80009f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009f2:	bc08      	pop	{r3}
 80009f4:	469e      	mov	lr, r3
 80009f6:	4770      	bx	lr
